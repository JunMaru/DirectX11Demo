//*****************************************************************************
// ユーティリティ[Utility.h]
//*****************************************************************************
#pragma once

//=============================================================================
// リーリス処理
// 安全にリリース処理を行います
// p : リリース処理を行う対象
//=============================================================================
template <class T> inline void SafeRelease(T*& p)
{
	if (p == nullptr)
	{
		return;
	}

	p->Release();
	p = nullptr;
}

//=============================================================================
// デリート処理
// 安全にデリート処理を行います
// p : デリート処理を行う対象
//=============================================================================
template <class T> inline void SafeDelete(T*& p)
{
	delete p;
	p = nullptr;
}

//=============================================================================
// デリート処理(配列)
// 安全にデリート処理を行います
// p : デリート処理を行う対象
//=============================================================================
template <class T> inline void SafeDeleteArray(T*& p)
{
	delete[] p;
	p = nullptr;
}

//=============================================================================
// 終了処理
// 安全に終了処理を行い、デリート処理も行います
// p : 終了処理を行う対象
//=============================================================================
template <class T> inline void SafeUninitAndDelete(T*& p)
{
	if (p == nullptr)
	{
		return;
	}

	p->Uninit();
	delete p;
	p = nullptr;
}