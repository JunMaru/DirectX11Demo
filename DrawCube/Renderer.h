//*****************************************************************************
// レンダラークラス[Renderer.h]
// 現状はDirectX11のレンダラーとしての振る舞いをする
//*****************************************************************************
#pragma once

//*****************************************************************************
// インクルード
//*****************************************************************************
#include "main.h"
#include <vector>

//*****************************************************************************
// 前方宣言
//*****************************************************************************
class IDrawable;

//*****************************************************************************
// クラス宣言
//*****************************************************************************
class Renderer
{
public:
	//=============================================================================
	// デストラクタ
	//=============================================================================
	~Renderer();

	//=============================================================================
	// インスタンス生成処理
	// hInstance : インスタンスのハンドル
	// hWnd : ウインドウのハンドル
	// isWindow : ウインドウモードにするかどうか
	// pResult : 結果格納先ポインタ
	//=============================================================================
	static Renderer* CreateInstance(HINSTANCE instance, HWND hWnd, bool isWindow, HRESULT* pResult);

	//=============================================================================
	// 終了処理
	//=============================================================================
	void Uninit();

	//=============================================================================
	// 描画処理
	// drawableObjects : 描画可能オブジェクト配列
	// viewPorjection : 描画する際のビュープロジェクション行列
	//=============================================================================
	void Draw(const std::vector<IDrawable*>& drawableObjects, const XMMATRIX& viewPorjection);


	//=============================================================================
	// デバイス取得処理
	// return : デバイス
	//=============================================================================
	ID3D11Device* GetDevice() const;

private:
	//=============================================================================
	// コンストラクタ
	//=============================================================================
	Renderer();

	//=============================================================================
	// 初期化処理
	// hInstance : インスタンスのハンドル
	// hWnd : ウインドウのハンドル
	// isWindow : ウインドウモードにするかどうか
	//=============================================================================
	HRESULT Init(HINSTANCE instance, HWND hWnd, bool isWindow);

	D3D_FEATURE_LEVEL _featureLevel;
	ID3D11Device* _pD3DDevice;
	ID3D11DeviceContext* _pImmediateContext;
	IDXGISwapChain* _pSwapChain;
	ID3D11RenderTargetView* _pRenderTargetView;
	ID3D11VertexShader* _pVertexShader;
	ID3D11PixelShader* _pPixelShader;
	ID3D11InputLayout* _pVertexLayout;
	ID3D11Buffer* _pConstantBuffer;
	ID3D11RasterizerState* _pRasteriserState;
	ID3D11Texture2D* _pDepthTexture;
	ID3D11DepthStencilView* _pDepthStencilView;
};

